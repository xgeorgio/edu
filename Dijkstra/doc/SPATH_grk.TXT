Α. ΔΙΑΤΥΠΩΣΗ-ΑΠΑΙΤΗΣΕΙΣ-ΠΡΟΔΙΑΓΡΑΦΕΣ
------------------------------------
Η διατύπωση του προβλήματος είναι η εξής:

Θεωρούμε ένα δίκτυο G=(V,E) με σύνολο κόμβων V και σύνολο ακμών E. Σε κάθε ακμή (i,j)εΕ του δικτύου αντιστοιχεί ένας πραγματικός αριθμός c(i,j) που ονομάζεται κόστος της ακμής (i,j). Η συνάρτηση c και το σύνολο ακμών Ε στο σύνολο των πραγματικών αριθμών ονομάζεται συνάρτηση κόστους του δικτύου. Έτσι, το δίκτυο ορίζεται ως η τριάδα G=(V,E,c).
Να γραφεί πρόγραμμα που να δέχεται ως είσοδο ένα τέτοιο δίκτυο με 7-κόμβους και να υπολογίζει τα ακόλουθα:
1. Τη διαδρομή ελάχιστου κόστους από τον κόμβο (i) στον κόμβο (j).
2. Τη διαδρομή ελάχιστου κόστους από τον κόμβο (i) στον κόμβο (j), όταν τεθεί ένας τυχαίος κόμβος του δικτύου εκτός λειτουργίας.
3. Τη διαδρομή ελάχιστου κόστους από τον κόμβο (i) στον κόμβο (j), όταν τεθεί μια τυχαία σύνδεση του δικτύου εκτός λειτουργίας.
Σε κάθε περίπτωση να εμφανίζεται η διαδρομή ελάχιστου κόστους, καθώς και το κόστος της διαδρομής.
Να γίνει εφαρμογή για το δοθέν δίκτυο (βλέπε φυλλάδιο εκφώνησης).


Β. ΠΑΡΟΥΣΙΑΣΗ ΑΛΓΟΡΙΘΜΟΥ
------------------------
Η πιο δημοφιλής μέθοδος εύρεσης μονοπατιού ελάχιστου κόστους σε ένα ζυγισμένο γραφο, είναι ο αλγόριθμος του Dijkstra που ανήκει στην κατηγορία των "άπληστων" (greedy) μεθόδων. 
Σύμφωνα με τον αλγόριθμο αυτό, ξεκινάμε από κάποιο αρχικό κόμβο, εξετάζοντας τα κόστη μετάβασης σε κάθε έναν από τους γειτονικούς κόμβους. Τα κόστη αυτά, μαζί με το όνομα του τρέχοντα κόμβου, ονομάζουν προσωρινά τους κόμβους που εξετάστηκαν. Στη συνέχεια πραγματοποιείται η μετάβαση με το ελάχιστο κόστος και ο κόμβος που μεταβαίνουμε ονοματίζεται μόνιμα με το όνομα (κόστος,προέλευση) που του έχει ήδη αποδωθεί. Η διαδικασία επαναλαμβάνεται από την αρχή για το νέο κόμβο, εξετάζοντας τόσο τους γειτονικούς (του νέου) κόμβους, όσο και όλους τους υπόλοιπους που έχουν αποκτήσει από προηγούμενες επαναλήψεις προσωρινά ονοματα. Με αυτό τον τρόπο ο αλγόριθμος ερευνά σταδιακά εναλλακτικά μονοπάτια, επιλέγοντας τελικά αυτό με το ελάχιστο συνολικό κόστος.
Ακριβής περιγραφή του αλγορίθμου και μελέτες σχετικά με την αποδοτικότητά του μπορούν να βρεθούν στη βιβλιογραφία, σχετικά με προβλήματα γράφων.

Γ. ΥΛΟΠΟΙΗΣΗ ΑΛΓΟΡΙΘΜΟΥ
-----------------------
Η υλοποίηση που προτείνεται για την επίλυση του αρχικού προβλήματος, χρησιμοποιεί τον αλγόριθμο του Dijkstra στην κλασική του μορφή. Αυτό σημαίνει ότι ο γράφος του προβλήματος θεωρείται μη κατευθυνόμενος, ενώ τα βάρη (κόστη) των ακμών είναι ορισμένα μονοσήμαντα. Αυτό σημαίνει ότι δύο κόμβοι συνδέονται μέσω ακμής με βάρος που δεν εξαρτάται από την κατεύθυνση της μετάβασης, δηλαδή ποιός κόμβος είναι η αφετηρία και ποιός ο στόχος.
Ο γράφος μπορεί να παρασταθεί με διάφορούς τρόπους, όπως για παράδειγμα με λίστες συνδέσεων ή με πίνακα βαρών, που στην περίπτωσή μας είναι τριγωνικός λόγω συμμετρίας των βαρών.
Η υλοποίηση που χρησιμοποιείται στο πρόγραμμα είναι ένας πίνακας βαρών. Ο πίνακας αυτός ορίζεται δυναμικά ανάλογα με  το μέγεθος του γράφου (αν Ν ο αριθμός των κόμβων, ο πίνακας ορίζεται ΝχΝ), αλλά ως τετραγωνικός αντί τριγωνικός. Η επιλογή πίνακα βασίζεται στο γεγονός ότι η επεξεργασία ζυγισμένων γράφων με πίνακες είναι απλούστερη και γρηγορότερη, παρά με λίστες γειτονικών κορυφών. Φυσικά η σπατάλη χώρου μπορεί να είναι σημαντική για μεγάλους αραιούς γράφους, όμως στο συγκεκριμένο πρόβλημα ο γράφος είναι πολύ μικρός (μόνο 7 κόμβοι) και μάλιστα αρκετά πυκνός. Ο πίνακας ορίζεται τετραγωνικός για να είναι εύκολη η δυνατότητα μετρατροπής του κώδικα, ώστε να γίνεται αναζήτηση και σε γράφους με μη συμμετρικό πίνακα βαρών.
Η συγκεκριμένη υλοποίηση του αλγορίθμου (με πίνακα) έχει σταθερή πολυπλοκότητα χώρου και χρόνου εκτέλεσης. Ο χώρος που απαιτείται είναι της τάξης του Ο(n^2), όπου (n) είναι ο αριθμός των κόμβων του δικτύου. Ο χρόνος εκτέλεσης εξαρτάται κυρίως από τους βρόγχους ανακύκλωσης της διαδικασίας αναζήτησης. Εύκολα προκύπτει ότι ο χρόνος αυτός είναι της τάξης Ο(n^2) επίσης, και εξαρτάται περισσότερο από τα ιδιαίτερα χαρακτηριστικά της δομής του γράφου, παρά από την πυκνότητά του, όπως θα συνέβαινε σε μια υλοποίηση με λίστες.


Δ. ΤΟ ΠΡΟΓΡΑΜΜΑ
---------------
Το δίκτυο του προβλήματος αποθηκεύεται στον πίνακα βαρών, ενώ υπάρχει και ένα αντίγραφο αυτού του αρχικού πίνακα, σε περίπτωση που ο χρήστης επιφέρει αλλαγές στο αρχικό δίκτυο και θελήσει να το επαναφέρει στην αρχική του μορφή. Οι δύο αυτοί πίνακες αρχικοποιούνται με "άπειρες" τιμές στα βάρη, ενώ οι πραγματικές τιμές ορίζονται από το κύριο πρόγραμμα ή από το χρήστη (βλέπε παρακάτω). Τα βάρη θεωρούνται ακέραιοι αριθμοί.
Δύο είναι οι βασικές ρουτίνες επίλυσης του προβλήματος: η "shortpath" και η "showpath". Η ρουτίνα "shortpath" είναι αυτή που υλοποιεί τον αλγόριθμο του Dijkstra για την αναζήτηση του μονοπατιού ελάχιστου κόστους. Χρησιμοποιεί, εκτός του πίνακα βαρών του δικτύου, μερικούς ακόμη βοηθητικούς πίνακες, εκ των οποίων ένας αποθηκεύει τα "ίχνη" της διαδρομής και ένας τους κόμβους που έχουν ονομαστεί μόνιμα. Κατά την αναζήτηση, ενημερώνονται αυτοί οι δύο πίνακες, καθώς και τρεις μεταβλητές, οι "mincost", "current" και "prev". Η πρώτη αφορά το ελάχιστο κόστος, ενώ οι άλλες δύο τον τρέχοντα και τον προηγούμενο κόμβο στο βέλτιστο μονοπάτι. Η διαδικασία αναζήτησης τερματίζει όταν ο τελικός κόμβος-στόχος προστεθεί στο βέλτιστο μονοπάτι (επιτυχία), ή όταν σε κάποια επανάληψη δεν υπήρξε πρόοδος, δηλαδή ο νέος κόμβος που βρέθηκε ταυτίζεται με τον προηγούμενο (αποτυχία). Μετά τον τερματισμό η μεταβλητή "mincost" έχει ως τιμή το συνολικό κόστος του βέλτιστου μονοπατιού. Όταν η τιμή αυτή έχει "άπειρη" τιμή σημαίνει ότι δεν υπάρχει κανένα μονοπάτι που να συνδέει τον αρχικό με τον τελικό κόμβο. Σε αντίθετη περίπτωση μπορεί να χρησιμοποιηθεί η ρουτίνα "showpath" για την εμφάνιση του βέλτιστου μονοπατιού και του συνολικού κόστους του. Η ρουτίνα αυτή χρησιμοποιεί τον πίνακα που κατασκευάστηκε από την "shortpath" και που δείχνει τον προηγούμενο κάθε κόμβου. Η κωδικοποιημένη αυτή μορφή μετατρέπεται σε μια πιο κατανοητή και παρουσιάζεται στο χρήστη με τη μορφή διαγράμματος μεταβάσεων, εμφανίζοντας επίσης και το συνολικό κόστος της διαδρομής.
Το κύριο πρόγραμμα περιλαμβάνει επιλογές για τον επαναορισμό του δικτύου (καταστροφή του τρέχοντος), επαναφορά του αρχικού δικτύου του προβλήματος, διαγραφή κόμβου, διαγραφή σύνδεσης, αλλαγή του βάρους μιας σύνδεσης, εμφάνιση του τρέχοντος πίνακα βαρών, καθώς και τη βασική λειτουργία αναζήτησης βέλτιστου μονοπατιού μεταξύ δύο κόμβων.

Ε. ΠΛΗΡΟΦΟΡΙΕΣ
--------------
Το πρόγραμμα αναπτύχθηκε έτσι ώστε να είναι κατά το μέγιστο δυνατό βαθμό μεταφέρσιμο σε οποιονδήποτε σύστημα. Για το λόγο αυτό ο κώδικας υλοποίηθηκε εξ'ολοκλήρου σε ANSI C, ενώ χρησιμοποιήθηκε (σε πολύ μικρό ποσοστό) και το πρότυπο ANSI Escape Sequences σχετικά με τη διαχείριση της οθόνης, για την κατασκευή ενός πολύ απλού αλλά λειτουργικού user-interface.

Σύστημα ανάπτυξης:
	Τύπος Η/Υ:  IBM-PC συμβατός
	Λειτ.Σύστ:  Microsoft DOS v6.0
	 Γλ.Προγρ:  Borland's Turbo C v2.0

Δοκιμάστηκε:
	Τύπος Η/Υ:  IBM-PC (συμβατός), SunSPARC/station4
	Λειτ.Συστ:  Microsoft DOS v6.0, IBM OS/2 Warp v2.0,
                 Microsoft Windows 95, Sun-Solaris (UNIX).
	 Γλ.Προγρ:  GNU C Compiler, Sun's C Compiler,
                 Turbo C v2.0 for MS-DOS,
                 Borland C++ v5.0 for MS-Windows,
                 Borland C++ v2.0 for OS/2.
                 
Απαιτήσεις:
	ANSI C Compiler, τερματικό με υποστήριξη ANSI Escape Sequences, απαιτήσεις μνήμης ανάλογα με το μέγεθος του δικτύου.


ΣΤ. ΒΙΒΛΙΟΓΡΑΦΙΑ-ΑΝΑΦΟΡΕΣ
-------------------------
[1]	"Δίκτυα Υπολογιστών" - Θ.Αποστολόπουλος
     Οικονομικό Πανεπιστήμιο Αθηνών, 1994.

[2]  "Δίκτυα Υπολογιστών - Σημειώσεις" - Σ.Πάσχος
     Πανεπιστήμιο Ιωαννίνων, Τμήμα Πληροφορικής, 1995.

[3]  "Δομές Δεδομένων - Τόμος Α'" - Ι.Μανωλόπουλος
     Εκδόσεις ArtOfText, 1989.

[4]  "Data Structures Using C" - A.Tenenbaum, Y.Langsam, M.Augenstein
     Prentice Hall International Editions.

[5]  "Microsoft's User Reference for MS-DOS v3.3
	 Appendix C: Installable Device Drivers - ANSI.SYS"
	Microsoft International.

