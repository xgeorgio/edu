* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

NANO-PASCAL COMPILER PACKAGE, version 1.9 (Beta)
A training compiler for a simple programming language,
using Flex and Bison programs.

Harris Georgiou (c) 1996

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *



                          +---------------------+
                          |  QUICK-TOUR MANUAL  |
                          +---------------------+



QUICKSTART
~~~~~~~~~~
        In order to successfully build the compiler executable(s), some
      common software packages are required. These are:

            (GNU) C compiler : ANSI standard C compiler
            (GNU) Flex       : lexical analyzer generator
            (GNU) Bison      : syntax analyzer (parser) generator

      For an automated build-up of the (final) executables for Nano-Pascal
      compiler, execute "build.bat" and read the instructions.



DESCRIPTION
~~~~~~~~~~~
        This package contains all necessary source code and definition
      files (FLEX & BISON) to implement the Nano-Pascal compiler. Nano-
      Pascal is a simple example of a programming language, defined to
      demonstrate the usage of Flex and Bison, and their usage in the
      automated construction of compilers for simple grammars.

        The files can be separated into three sets, according to their
      usage. The two primary parts are the files that define the lexical
      analyzer (Flex source) and the syntactical analyzer (Bison source).
      The third part contains C source code files that define data
      structures and routines for error handling, symbol table, object
      code generation, token recognition and a shell to simplify the
      usage of the "pure" compiler generated by Bison.

        Here is a detailed listing of the files contained in the package:

           FILENAME.EXT        DESCRIPTION
           ~~~~~~~~~~~~        ~~~~~~~~~~~
           README   1ST        Documentation file (info,usage,messages), this file.
           BUILD    BAT        Batch file for a step-by-step compiler creation
           ENTRY    H          Code: Header file for hash-table entry definition
           TYPES    H          Code: Header file for data types definition
           ERRORS   H          Code: Header file for error handling routines
           HASHTAB  H          Code: Header file for hashing-table implementation
           SYMCODE  H          Code: Header file for object code generation
           SCANNER  H          Code: Header file for token recognition
           SCANNER  L          Flex: Lexical analyzer (definition) file
           PARSER   Y          Bison: Syntactical analyzer (definition) file
           PARSER_H ADD        Code: Add-on code for bison-generated header file
           NPCSHELL H          Code: Header file for compiler-shell program
           NPC      C          Code: Source file for compiler-shell program
           TEST1    NP         Example: A simple nano-pascal program
           TEST2    NP         Example: A simple nano-pascal program

        During the build-up process of the compiler executable(s), some additional
      files are created by Flex and Bison. These files are the final code of the
      main body of the compiler. However, with some versions of GNU C copiler a
      fix patch is needed in the parser's header file. The code of "parser_h.add"
      must be added on top of the header file code, in order to successfully compile
      and link the compiler executable. These all are taken care automatically if
      "build.bat" is executed. It creates these source code files and fixes the
      generated header file at the same time. Also, it creates the compiler shell,
      the program which should normally be used as the final executable of Nano-
      Pascal compiler.



USING THE COMPILER
~~~~~~~~~~~~~~~~~~
        The usage of the compiler is quite simple:

                            npc  <sourcefile>  [<objectfile>]

      where <sourcefile> is a text file that contains Nano-Pascal source code
      and the optional <objectfile> is the final (symbolic) low-level object
      code generated by the compiler. It sould be mentioned that only object
      files are created. Executable binaries are platform-depended and have no
      real use for a simple demonstrating language, such as Nano-Pascal. When
      a source file is processed, the compiler reports for any lexical, syntax
      or semantic error, showing the line, the type and the nature of the error.
      If errors are found, an error report summary is presented and no object
      code is created, otherwise the generated code is written into object file.
      Compiler usage can be obtained on-line by typing:  "npc -?" or "npc -h".



PROBLEMS & LIMITATIONS
~~~~~~~~~~~~~~~~~~~~~~
        Nano-Pascal resides on a simplified grammar in order to be easy to build
      and understand, but this does not mean that the compiler itself is simple
      nor error-free. In general, Bison and all compatible generators (such as
      Yacc) can handle grammars of LALR(1) type. But even Nano-Pascal grammar
      is not a "pure" LALR(1) grammar, resulting some problems in source code
      parsing. Some problems may be resolved by redefining some grammar rules,
      although some features of common programming languages (C++) require a huge
      increase in grammar size. However, Nano-Pascal is still a good example of a
      programming language and demonstrates the basic compiler development technics.


TECHNICAL INFORMATIONS
~~~~~~~~~~~~~~~~~~~~~~
        This package has been developed platform-independed. The only programs
      used are: (GNU) Bison, (GNU) Flex and (GNU) C compiler. Some part of the
      code has been developed and tested in UNIX machines (SUN Solaris), while
      other parts have been developed in PC systems. To ensure compatibility,
      only GNU Flex and GNU C compiler programs (DJGPP package for PCs) have
      been used, with an exception for Bison. Due to unavailability of a good
      GNU Bison for PCs and because the available GNU Yacc programs are not
      fully compatible with GNU Bison, the program:

        All developed programs have been tested in the following systems:
               * SUN's Solaris Unix System
               * EP/IX Unix System
               * Linux Unix System
               * Microsoft's MS-DOS v6.0
               * Microsoft's MS-Windows v3.1
               * Microsoft's MS-Windows 95
               * IBM's OS/2 Warp

